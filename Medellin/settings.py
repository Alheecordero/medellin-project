"""
Django settings for Medellin project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# import environ  # Comentado - usando settings_local.py

# from google.oauth2 import service_account  # Comentado - usando settings_local.py

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# env = environ.Env(
#     # set casting, default value
#     DEBUG=(bool, False)
# )

# # Take environment variables from .env file
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Valores por defecto para desarrollo local
class EnvMock:
    def __init__(self):
        self._env_vars = {}
        # Leer el archivo .env
        env_file = os.path.join(BASE_DIR, '.env')
        if os.path.exists(env_file):
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip("'\"")
                        self._env_vars[key] = value
    
    def __call__(self, key, default=None):
        # Primero buscar en el archivo .env, luego en os.environ
        return self._env_vars.get(key, os.environ.get(key, default))
    
    def bool(self, key, default=False):
        val = self._env_vars.get(key, os.environ.get(key, str(default)))
        return str(val).lower() in ('true', '1', 'yes')
    
    def db(self):
        # Parsear DATABASE_URL si existe
        database_url = self._env_vars.get('DATABASE_URL', os.environ.get('DATABASE_URL'))
        if database_url:
            try:
                import dj_database_url
                return dj_database_url.parse(database_url)
            except ImportError:
                # Fallback manual parsing si dj_database_url no está instalado
                return self._parse_database_url(database_url)
        return {}
    
    def _parse_database_url(self, url):
        """Parse DATABASE_URL manually"""
        # postgres://user:password@host:port/database
        if url.startswith('postgres://'):
            url = url.replace('postgres://', 'postgresql://')
        
        from urllib.parse import urlparse
        parsed = urlparse(url)
        
        # SIEMPRE usar PostGIS para PostgreSQL ya que es un proyecto GeoDjango
        engine = 'django.contrib.gis.db.backends.postgis' if 'postgres' in parsed.scheme else 'django.db.backends.' + parsed.scheme
        
        return {
            'ENGINE': engine,
            'NAME': parsed.path[1:] if parsed.path else '',
            'USER': parsed.username or '',
            'PASSWORD': parsed.password or '',
            'HOST': parsed.hostname or '',
            'PORT': str(parsed.port) if parsed.port else '',
        }
    
    def list(self, key, default=None):
        val = self._env_vars.get(key, os.environ.get(key, default))
        if isinstance(val, str):
            return val.split(',')
        return val if val else []

env = EnvMock()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# En producción, asegúrate de que la variable de entorno DEBUG esté establecida en 'False'
DEBUG = env.bool('DEBUG')

# Añade la IP de tu servidor y tu dominio a esta lista
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default='127.0.0.1,localhost,vivemedellin.co,www.vivemedellin.co')
# Confiar en estos orígenes para CSRF cuando se usa HTTPS tras proxy (Nginx)
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default='https://vivemedellin.co,https://www.vivemedellin.co')
# Respetar cabeceras de proxy para host y esquema
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'easy_thumbnails',  # Para manejo de thumbnails
    'rest_framework',
    'explorer',
    'storages',
    'django_extensions',
    'taggit',  # Añadimos django-taggit
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Debug toolbar comentado temporalmente por problemas de templates
# if DEBUG:
#     INSTALLED_APPS += ['debug_toolbar']
#     MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
#     INTERNAL_IPS = [
#         '127.0.0.1',
#     ]

ROOT_URLCONF = 'Medellin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'explorer.context_processors.comunas_context',
                'explorer.context_processors.settings_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'Medellin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Usar DATABASE_URL si está disponible (recomendado para producción)
if 'DATABASE_URL' in os.environ or env('DATABASE_URL', None):
    DATABASES = {
        'default': env.db()
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST', default='localhost'),
            'PORT': env('DB_PORT', default='5432'),
        }
    }

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

GOOGLE_API_KEY=env('GOOGLE_API_KEY')

# Google Analytics 
GOOGLE_ANALYTICS_ID = env('GOOGLE_ANALYTICS_ID', default=None)

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "explorer" / "static",
    BASE_DIR / "Medellin" / "static",
]





# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/'

# AUTH_USER_MODEL = 'usuarios.User'  # Comentado para usar User predeterminado
LOGIN_URL = '/login/'
LOGOUT_REDIRECT_URL = '/'

# Configuración para django-allauth - ELIMINADO
# SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',  # Eliminado
]

# Configuración de allauth - ELIMINADO
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# ACCOUNT_AUTHENTICATION_METHOD = "email"
# ACCOUNT_USERNAME_REQUIRED = False

# Configuración de Google OAuth - ELIMINADO
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'SCOPE': [
#             'profile',
#             'email',
#         ],
#         'AUTH_PARAMS': {
#             'access_type': 'online',
#         },
#         'OAUTH_PKCE_ENABLED': True,
#     }
# }

# URLs de redirección después del login/logout

# ======================================================
# CONFIGURACIÓN DE GOOGLE CLOUD STORAGE (GCS)
# ======================================================

# --- Google Cloud Storage Configuration ---
try:
    from google.oauth2 import service_account
    GS_CREDENTIALS_PATH = os.path.join(BASE_DIR, 'vivemedellin-fdc8cbb3b441.json')
    if os.path.exists(GS_CREDENTIALS_PATH):
        GS_PROJECT_ID = 'vivemedellin'
        GS_BUCKET_NAME = 'vivemedellin-bucket'
        GS_CREDENTIALS = service_account.Credentials.from_service_account_file(GS_CREDENTIALS_PATH)
        GS_LOCATION = 'us-central1'
        DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        GS_CUSTOM_ENDPOINT = f'https://storage.googleapis.com/{GS_BUCKET_NAME}'
        GS_DEFAULT_ACL = 'publicRead'
    else:
        # Usar almacenamiento local si no están las credenciales de GCS
        DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
except ImportError:
    # Usar almacenamiento local si no están instaladas las librerías de Google
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
# --- End Google Cloud Storage Configuration ---


# La configuración de STATICFILES_STORAGE ya está manejada arriba basada en USE_GCS
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Optimización de respuestas
MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')  # Comprimir respuestas

# Configuración de caché para archivos estáticos
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Headers de caché para archivos estáticos (1 año)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Tiempo de caché del navegador para archivos estáticos
from django.core.cache import cache
CACHES['staticfiles'] = {
    'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
    'LOCATION': '/tmp/django_static_cache',
    'TIMEOUT': 31536000,  # 1 año
    'OPTIONS': {
        'MAX_ENTRIES': 10000
    }
}

# Optimización de sesiones
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Configuración de Easy Thumbnails
THUMBNAIL_ALIASES = {
    '': {
        'small': {'size': (100, 100), 'crop': True},
        'medium': {'size': (300, 300), 'crop': True},
        'large': {'size': (600, 600), 'crop': 'smart'},
        'card': {'size': (400, 300), 'crop': True},
        'hero': {'size': (1200, 600), 'crop': True},
        'list': {'size': (250, 200), 'crop': True},
    },
}

THUMBNAIL_PROCESSORS = (
    # Default processors
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'easy_thumbnails.processors.scale_and_crop',
    'easy_thumbnails.processors.filters',
)

# Configuración de django-taggit
TAGGIT_CASE_INSENSITIVE = True  # Las etiquetas no serán sensibles a mayúsculas/minúsculas

# Importar configuraciones locales SOLO en desarrollo (si no existe .env)
# Esto evita que settings_local.py sobrescriba la configuración de producción
if not os.path.exists(os.path.join(BASE_DIR, '.env')):
    try:
        from .settings_local import *
    except ImportError:
        pass

# Al final del archivo, agregar configuración de Debug Toolbar
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG and env.bool('SHOW_DEBUG_TOOLBAR', True),
    'SHOW_COLLAPSED': True,
}

# Logging profesional para producción
if not DEBUG:
    import logging
    from logging.handlers import RotatingFileHandler
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
            },
        },
        'handlers': {
            'file_error': {
                'level': 'ERROR',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': '/var/log/medellin/django.err',
                'maxBytes': 1024*1024*10,  # 10MB
                'backupCount': 5,
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file_error'],
                'level': 'ERROR',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['file_error'],
                'level': 'WARNING',
                'propagate': False,
            },
            'django.security': {
                'handlers': ['file_error'],
                'level': 'WARNING',
                'propagate': False,
            },
        },
    }