"""
Django settings for Medellin project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
# import environ  # Comentado - usando settings_local.py

# from google.oauth2 import service_account  # Comentado - usando settings_local.py

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# env = environ.Env(
#     # set casting, default value
#     DEBUG=(bool, False)
# )

# # Take environment variables from .env file
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Valores por defecto para desarrollo local
class EnvMock:
    def __init__(self):
        self._env_vars = {}
        # Leer el archivo .env
        env_file = os.path.join(BASE_DIR, '.env')
        if os.path.exists(env_file):
            with open(env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip().strip("'\"")
                        self._env_vars[key] = value
    
    def __call__(self, key, default=None):
        # Primero buscar en el archivo .env, luego en os.environ
        return self._env_vars.get(key, os.environ.get(key, default))
    
    def bool(self, key, default=False):
        val = self._env_vars.get(key, os.environ.get(key, str(default)))
        return str(val).lower() in ('true', '1', 'yes')
    
    def db(self):
        return {}
    
    def list(self, key, default=None):
        val = self._env_vars.get(key, os.environ.get(key, default))
        if isinstance(val, str):
            return val.split(',')
        return val if val else []

env = EnvMock()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# En producción, asegúrate de que la variable de entorno DEBUG esté establecida en 'False'
DEBUG = env('DEBUG')

# Añade la IP de tu servidor y tu dominio a esta lista
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'usuarios',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'explorer',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']
    INTERNAL_IPS = [
        '127.0.0.1',
    ]

ROOT_URLCONF = 'Medellin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'explorer.context_processors.comunas_context_optimized',
            ],
        },
    },
]

WSGI_APPLICATION = 'Medellin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': env.db()
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST', default='localhost'),
            'PORT': env('DB_PORT', default='5432'),
        }
    }

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

GOOGLE_API_KEY=env('GOOGLE_API_KEY')

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'





# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_REDIRECT_URL = '/'


AUTH_USER_MODEL = 'usuarios.User'
LOGIN_URL = '/usuarios/login/'




#storage
# Ruta a tu archivo de clave JSON
GS_CREDENTIALS_PATH = env('GS_CREDENTIALS_PATH', 'vivemedellin-fdc8cbb3b441.json')
# Cargar credenciales de GCS
from google.oauth2 import service_account
if GS_CREDENTIALS_PATH:
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        os.path.join(BASE_DIR, GS_CREDENTIALS_PATH)
    )

# Nombre del bucket
GS_BUCKET_NAME = env('GS_BUCKET_NAME')

# Configuración de almacenamiento de archivos
USE_GCS = not DEBUG or env.bool('USE_GCS_IN_DEBUG', False)

if USE_GCS:
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_DEFAULT_ACL = 'publicRead'
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
else:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'


# La configuración de STATICFILES_STORAGE ya está manejada arriba basada en USE_GCS
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Optimización de respuestas
MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')  # Comprimir respuestas

# Configuración de caché para archivos estáticos
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Headers de caché para archivos estáticos (1 año)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Tiempo de caché del navegador para archivos estáticos
from django.core.cache import cache
CACHES['staticfiles'] = {
    'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
    'LOCATION': '/tmp/django_static_cache',
    'TIMEOUT': 31536000,  # 1 año
    'OPTIONS': {
        'MAX_ENTRIES': 10000
    }
}

# Optimización de sesiones
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Importar configuraciones locales si existen
try:
    from .settings_local import *
except ImportError:
    pass

# Al final del archivo, agregar configuración de Debug Toolbar
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG and env.bool('SHOW_DEBUG_TOOLBAR', True),
    'SHOW_COLLAPSED': True,
}